# [gcode_macro _PARK]
# gcode:
#     {% set th = printer.toolhead %}
#     G0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y//2} Z30 F3600 

# [gcode_macro PARK_TO_PROBE_CENTER_POSITION]
# gcode:
#     {% set xZeroRefPos, yZeroRefPos = printer["configfile"].config["bed_mesh"]["zero_reference_position"].split(',')|map('trim')|map('float') %}
#     {% set yProbeOffset = printer["configfile"].config["probe"]["y_offset"]|float %}
#     {% set xPos = xZeroRefPos %}
#     {% set yPos = yZeroRefPos - yProbeOffset %}

#     SET_DISPLAY_TEXT MSG="Calibrate Position: X:{xPos} Y:{yPos}"
#     G0 X{xPos} Y{yPos} Z5 F3600

# [gcode_macro PARK_TO_NOZZLE_CENTER_POSITION]
# gcode:
#     {% set xPos, yPos = printer["configfile"].config["bed_mesh"]["zero_reference_position"].split(',')|map('trim')|map('float') %}
#     SET_DISPLAY_TEXT MSG="Nozzle Position: X:{xPos} Y:{yPos}"
#     G0 X{xPos} Y{yPos} Z5 F3600
    
[gcode_macro PARK]
description: Park the toolhead at the back and retract some filament if the nozzle is hot
gcode:
    {% if printer.toolhead.homed_axes != "xyz" %}
        {action_raise_error("Cannot park the toolhead because axis are not homed!")}
    {% endif %}

    {% set verbose = printer["gcode_macro _GLOBAL_USER_VARIABLES"].verbose %}
    {% set material = printer['gcode_macro START_PRINT'].material %}
    {% set firmware_retraction_enabled = printer["gcode_macro _GLOBAL_USER_VARIABLES"].firmware_retraction_enabled %}

    {% set speed_xy = printer["gcode_macro _GLOBAL_USER_VARIABLES"].travel_speed * 60 %}
    {% set speed_z = printer["gcode_macro _GLOBAL_USER_VARIABLES"].z_drop_speed * 60 %}
    
    {% set park_pos_x, park_pos_y = printer["gcode_macro _GLOBAL_USER_VARIABLES"].park_position_xy|map('float') %}
    {% set park_pos_x = params.X|default(park_pos_x)|float %}
    {% set park_pos_y = params.Y|default(park_pos_y)|float %}

    {% set park_lift_z = printer["gcode_macro _GLOBAL_USER_VARIABLES"].park_lift_z %}
    {% set park_lift_z = params.Z_HOP|default(park_lift_z)|float %}

    {% set max_z = printer.toolhead.axis_maximum.z|float %}
    {% set act_z = printer.toolhead.position.z|float %}

    {% set park_pos_z = act_z + park_lift_z %}
    {% if park_pos_z > max_z %}
        {% set park_pos_z = max_z %}
    {% endif %}

    SAVE_GCODE_STATE NAME=PARK

    {% if printer.extruder.can_extrude %}
        {% if params.E is defined %}
            {% set retract_length = params.E|float|abs %}
            {% if verbose %}
                RESPOND MSG="Retraction overrided with parameter, Extruder retraction = {retract_length}"
            {% endif %}
        {% else %}
            {% if firmware_retraction_enabled %}    # use firmware_retraction parameter for retract (in case firmware retraction is selected in printer.cfg)
                {% if verbose %}
                    RESPOND MSG="Firmware retraction enabled, Extruder retraction = {printer.firmware_retraction.retract_length}"
                {% endif %}                
                G10
            {% else %}                              # otherwise: use material parameter if available for retract, otherwise use default value
                {% if printer["gcode_macro _GLOBAL_USER_VARIABLES"].material_parameters[material] is defined %}
                    {% set retract_length = printer["gcode_macro _GLOBAL_USER_VARIABLES"].material_parameters[material].retract_length|default(1.7) %}
                {% else %}
                    {% set retract_length = 1.7 %}
                {% endif %}
                {% if verbose %}
                    RESPOND MSG="Firmware retraction disabled, Extruder retraction = {retract_length}"
                {% endif %}
            {% endif %}
        {% endif %}

        {% if retract_length is defined and retract_length > 0 %}
            G92 E0
            G1 E-{retract_length} F2100
        {% endif %}
    {% endif %}

    G90
    G1 Z{park_pos_z} F{speed_z}
    G0 X{park_pos_x} Y{park_pos_y} F{speed_xy}

    RESTORE_GCODE_STATE NAME=PARK